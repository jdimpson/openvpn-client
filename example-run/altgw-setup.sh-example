#!/bin/sh
set -e

if ! mount | grep -q 'type cgroup2'; then
	echo "This script relies on cgroup2 kernel support. You either don't have it loaded, or have cgroup1" >&2;
	echo "See https://gist.github.com/kriswebdev/a8d291936fe4299fb17d3744497b1170 (from which I based this script) for a more fully-featured and robust version of this script." >&2;
	exit 1;
fi

DEV=ens18
FWMARK=11;
TABLE="altgw";
GROUP=$(id -g -n $USER)
ALTGWIP=192.168.1.5


# create the cgroup for the alternate routing table
sudo mkdir -p /sys/fs/cgroup/$TABLE
sudo chown -R $USER:$GROUP /sys/fs/cgroup/$TABLE

# make a name for for the alternate routing table (this is the only part of this script that is persistant, although we overwrite it each time)
echo "$FWMARK $TABLE" | sudo tee /etc/iproute2/rt_tables.d/$TABLE-route.conf > /dev/null

# associate the route table to a firewall mark
sudo ip rule add fwmark $FWMARK table $TABLE

# add the alternate router's IP address as the default route in the new table
sudo ip route add default via $ALTGWIP dev $DEV table $TABLE

# configure "loose" reverse path filtering. I think this is needed because 
# packets are received and evaluated for RPF before being fwmarked, and 
# fwmarking is what moves the packet into the context of the altgw routing 
# table. So strict RPF might block a packet when evaluated against only the 
# default routing table, but apparantly loose mode expands to check against 
# all routing tables. I'm not completely happy with this explanation, because
# normally Loose RPF mode is explained as checking against reachability via 
# any network interface. It makes sense that the technical specifics for 
# loose mode opens the validation aperture to all network interface / routing 
# table combinations, but I don't know if that's true.
# see https://en.wikipedia.org/wiki/Reverse-path_forwarding#Loose_mode
echo 2 | sudo tee /proc/sys/net/ipv4/conf/all/rp_filter > /dev/null;
echo 2 | sudo tee /proc/sys/net/ipv4/conf/$DEV/rp_filter > /dev/null;

# any packets associated with the cgroup shuold be marked with the firewall mark.
sudo iptables -t mangle -A OUTPUT -m cgroup --path $TABLE -j MARK --set-mark $FWMARK;
# and IP masqueraded
sudo iptables -t nat -A POSTROUTING -m cgroup --path $TABLE -o $DEV -j MASQUERADE;

# show the new table
ip route show table $TABLE;

# run atraceroute before using the new table
traceroute -n 8.8.8.8

# convert this process to use the new table
echo $$ | sudo tee /sys/fs/cgroup/$TABLE/cgroup.procs 

# see how the traceroute changes because the new table is used by this process (and its children)
traceroute -n 8.8.8.8

echo "Now add the process ID of any program to /sys/fs/cgroup/$TABLE/cgroup.procs to cause it to use the new routing table."
echo "The easiest way to do this is to create a new shell process, add it to the cgroup file, the run any other commands from that shell: they will inherit the new routing table."
echo "    e.g. echo \$\$ | sudo tee /sys/fs/cgroup/$TABLE/cgroup.procs ";
